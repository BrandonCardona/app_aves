import streamlit as st
import numpy as np
import cv2
from keras.applications.imagenet_utils import preprocess_input
from utils.modelo import cargar_modelo

def clasificar_ave():
    st.title("üñºÔ∏è Clasificaci√≥n de aves segun su imagen")
    names = ['Solitario Andino','Zorzal sp.','Zorzal Cara Gris', 'Zorzal Pico Naranja', 'Zorzal Sabi√°','Zorzal Ventrip√°lido', 
             'Zorzalito Sombr√≠o','Zorzal de Anteojos', 'Zorzal Canelo','Mirlo Azulado', 'Matraca Tropical','Cucarachero Currucuch√∫', 
             'Cucarachero Ventrinegro','Saltapared Com√∫n', 'Choch√≠n Monta√±√©s','Cucarachero Ruise√±or Sure√±o', 'Saltapared Sabanero',
             'Cucarachero Cabecigr√≠s', 'Cucarachero Jaspeado','Cucarachero Bigotudo Montano']

    uploaded_file = st.file_uploader("Sube una imagen", type=["jpg", "jpeg", "png"])
    model = cargar_modelo()

    if uploaded_file is not None and model:
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, 1)
        image_resized = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)
        x = preprocess_input(np.expand_dims(image_resized, axis=0))

        st.info("Realizando predicci√≥n...")
        try:
            preds = model.predict(x)
            confidence = np.max(preds) * 100
            predicted_class = names[np.argmax(preds)]

            st.image(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), caption="üì∑ Imagen cargada", use_container_width=True)
            st.success(f"üïäÔ∏è El modelo predice que es un: **{predicted_class}** con una confianza del **{confidence:.2f}%**")

        except Exception as e:
            st.error(f"‚ùå Error al predecir: {e}")
